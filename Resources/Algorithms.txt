Choose a set length for the blocks of tex, pad when length is less than that set length
When decrypting: each for the code that precedes the padded part

Main Algorithm
- Get classes that need the key from key reader to read the file created by keyreader.class
- Possibly implement whole time values, month/day/hour/minute/second(all skewed(no logical ordering or logical skew so that it is harder to use))
- Build onto base.class and make a new class to turn the program into a proper/custom encryption in public, asymmetric key
- Secret number is based off of relationship between the angles the minute and hour hand make on a clock, with a defined 0/start value(any position on the clock to make it harder) 

Group Algorithm
IDEAS: Sub level keys to encrypt that when combined form the total key OR Blockchain type of thing, but host the chain locally on all machines, and update it with message sendings, with the
       intention of verifying who sent the message after the fact
+ Have destructing messages that disappear on the individual who reads itâ€™s computer
- Add a new selection in Worker.class entitled group messaging or something
- Prompt user for number of people
+ How to distribute the keys?
- Based off of number of people, generate shortish keys that everyone in combination needs to actually decrypt anything(DHKE)
- Have it so the message contains a key at the beginning, some token to break the message up, then the encrypted message

Hashing Algorithm
+ Make it so the part being hashed is based off of what came before it, so that every word will result in a different hash
+ Figure out how to make sure things like throw and throwing will result in drastically different hashes
+ We need some salt

File Algorithm

Random Key Stuff
RENDER KEYS AS HEX OR OCTAL IN ORDER TO SHORTEN KEY LENGTH